---
import ResponsiveToggle from './ResponsiveToggle.astro'
import { Icon } from 'astro-icon/components'
---

<div id="main-navigation" class="is-desktop">
  <div class="desktop-menu">
    <nav>
      <ul>
        <li class="brand-logo">
          <img src='/company-logo.png' class="w-[30px] object-contain" >
          <span class="sr-only">X Supplies</span>
        </li>
        <li class="menu-item">
          <button class="toggle-expanded-view" aria-expanded="false">
            <Icon name="majesticons:chevron-double-right-line" /> 
            <span class="sr-only">Close menu</span>
          </button>
        </li>
        <slot />
        <li class="menu-item bottom-position">
          <a class="logout-button" href="/login/">
            <Icon name="majesticons:logout-line" /> 
            <span class="sr-only">Logout</span>
          </a>
        </li>
        <!-- <li class="menu-item bottom-position user-avatar">
          <a href="/settings/" class="logout-link">
            <Icon name="majesticons:user-box-line" /> 
            <span class="sr-only">Settings</span>
          </a>
        </li> -->
      </ul>
    </nav>
  </div>
  <div class="container mobile-menu p-4">
    <a href="/" class="w-[40px]">
      <img src='/company-logo.png' alt="">
    </a>
    <ResponsiveToggle />
    <nav>
      <ul>
        <slot />
        <li class="menu-item">
          <a class="logout-button" href="/login">
            <Icon name="majesticons:logout-line" /> 
            <span class="sr-only">Logout</span>
          </a>
        </li>
        <li class="menu-item user-avatar">
          <a href="/settings">
            <Icon name="majesticons:user-box-line" /> 
            <span class="sr-only">Settings</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector<HTMLDivElement>('#main-navigation')!
  const mainMenu = mainNav.querySelector('ul')!
  const toggleExpandedView = document.querySelector<HTMLButtonElement>('.toggle-expanded-view')!
  const menuIconLabels = [...mainNav.querySelectorAll('.sr-only')]
  const mediaQuery = window.matchMedia('(min-width: 48em)')
  let isMenuExpanded = localStorage.getItem('isMenuExpanded')

  const logoutButton = document.querySelector('.logout-button')!
  logoutButton.addEventListener('click', () => {
    localStorage.setItem('isLoggedIn', 'false')
  })

  // functions
  const setActiveMenuItem = () => {
    const menuItems = [...mainMenu.querySelectorAll<HTMLAnchorElement>('a:not([rel*="external"])')]

    menuItems.forEach(menuItem => {
      if (menuItem.pathname === window.location.pathname) {
        menuItem.classList.add('is-active')
        menuItem.setAttribute('aria-current', 'page')
      }
    })
  }

  const expandMenu = () => {
    mainNav.classList.add('is-expanded')
    localStorage.setItem('isMenuExpanded', 'true')
    toggleExpandedView.setAttribute('aria-expanded', 'true')
    toggleExpandedView.querySelector('span')!.textContent = 'Collapse menu'
    
    menuIconLabels.forEach(menuIconLabel => {
      menuIconLabel.classList.remove('sr-only')
    })
  }

  const collapseMenu = () => {
    mainNav.classList.remove('is-expanded')
    localStorage.setItem('isMenuExpanded', 'null')
    toggleExpandedView.setAttribute('aria-expanded', 'false')
    toggleExpandedView.querySelector('span')!.textContent = 'Expand menu'
    
    menuIconLabels.forEach(menuIconLabel => {
      menuIconLabel.classList.add('sr-only')
    })
  }

  const checkViewportWidth = () => {
    if (mediaQuery.matches) {
      mainNav.classList.add('is-desktop')
      mainNav.classList.remove('is-mobile')

      collapseMenu()
    } else {
      mainNav.classList.remove('is-desktop')
      mainNav.classList.add('is-mobile')

      collapseMenu()
    }
  }

  // execution
  mainMenu && mainMenu.addEventListener('keydown', event => {
    const currentMenuItem = (event.target as HTMLElement).closest('li')!
    const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
    const currentIndex = menuItems.findIndex(item => item === currentMenuItem)

    const key = event.key
    let targetItem

    if (key === 'ArrowDown') {
      event.preventDefault()
      if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
        targetItem = menuItems[0]
      } else {
        targetItem = menuItems[currentIndex + 1]
      }
    }

    if (key === 'ArrowUp') {
      event.preventDefault()
      if (menuItems.indexOf(currentMenuItem) === 0) {
        targetItem = menuItems[menuItems.length - 1]
      } else {
        targetItem = menuItems[currentIndex - 1]
      }
    }

    if (key === 'Escape') {
      targetItem = menuItems[0]
    }

    if (targetItem) {
      targetItem.querySelector<HTMLAnchorElement | HTMLButtonElement | HTMLInputElement>('a, button, input')!.focus()
    }
  })

  toggleExpandedView.addEventListener('click', () => {
    mainNav.classList.contains('is-expanded')
      ? collapseMenu()
      : expandMenu()
  })

  window.addEventListener('resize', checkViewportWidth)

  setActiveMenuItem()
  checkViewportWidth()

  if (isMenuExpanded === 'true') {
    expandMenu()
  }
</script>

<style is:global>

  #main-navigation {
    background-color: hsl(203, 32%, 90%);

    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    &.is-desktop {
      width: 60px;
      min-height: 100vh;
      position: fixed;
      z-index: 1;
      box-shadow: 0 0 40px rgba(0, 0, 0, 0.15);

      .mobile-menu { 
        display: none; 
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu { 
        nav {
          display: none; 
        }

        &.show nav {
          display: block;
        }
      }

      .responsive-toggle {
        display: block;
      }

      .desktop-menu {
        display: none;
      }
    }

    nav {
      width: 100%;

      > ul {
        display: flex;
        width: 100%;

        .is-active {
          font-weight: bold;
        }
      }

      li,
      a,
      button {
        width: 100%;
      }

      a,
      button {
        display: flex;
        justify-content: center;
        padding: 1rem 0;
        color: var(--neutral-400);
        transition: color 0.2s ease-in-out, background-color 0.2s ease-in-out;
      }

      .user-avatar a {      
        img {
          padding: 0.5rem;
          max-width: 60px;
          border-radius: 100%;
        }
      }

      button {
        border: none;
      }

      svg {
        width: 30px;
      
        path {
          transition: fill 0.2s ease-in-out;
        }
      }

      a:hover,
      a:focus,
      a.is-active,
      button:hover, 
      button:not(.toggle-expanded-view):focus {
        color: var(--neutral-800);
        background-color: var(--secondary-200);

        svg path, svg use {
          stroke: rgb(98, 141, 190);
          color: rgb(98, 141, 190);
        }
      }
    }

    .desktop-menu {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      min-height: 100vh;

      ul {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-height: 100vh;
        position: relative;

        .bottom-position {
          position: absolute;
        }

        .bottom-position:nth-last-of-type(1) { bottom: 1rem; }
        .bottom-position:nth-last-of-type(2) { bottom: 3.75rem; }
        .bottom-position:nth-last-of-type(3) { bottom: 8rem; }

        .brand-logo {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          padding: 1rem;
          color: var(--neutral-100);
          background-color: var(--neutral-700);

          img {
            max-height: 18px;
          }
        }
      }

      .toggle-expanded-view {
        svg {
          padding-top: 3px;
        }

        span {
        text-decoration: underline;
        }

        &:hover,
        &:focus {
          span {
            text-decoration: none;
          }
        }
      }
    }

    &.is-expanded {
      width: 200px;

      .desktop-menu {
        a,
        button {
          justify-content: left;
          align-items: center;
          gap: 0.5rem;
          padding: 1rem 0.75rem;
        }
      } 

      ~ main {
        margin-left: 200px;
      }
    }

    .mobile-menu nav {
      > ul {
        flex-direction: column;
        margin-top: 1rem;

        a {
          justify-content: start;
          align-items: center;
          gap: 0.5rem;

          &:hover,
          &:focus {
            color: var(--secondary-200);
            background-color: transparent;

            svg path {
              fill: var(--secondary-200);
            }
          }
        }
      }

      svg {
        width: 35px;
      
        path {
          transition: fill 0.2s ease-in-out;
        }
      }
    }
  }
</style>
